/*
 * echo.c --
 *
 *	Produce a page containing all FastCGI inputs
 *
 *
 * Copyright (c) 1996 Open Market, Inc.
 *
 * See the file "LICENSE.TERMS" for information on usage and redistribution
 * of this file, and for a DISCLAIMER OF ALL WARRANTIES.
 *
 */
#ifndef lint
static const char rcsid[] = "$Id: echo.c,v 1.5 1999/07/28 00:29:37 roberts Exp $";
#endif /* not lint */

#include "fcgi_config.h"
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <pthread.h>

#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif

#ifdef _WIN32
#include <process.h>
#else
extern char **environ;
#endif

#include "fcgi_stdio.h"
#include "make_log.h"

static void PrintEnv(char *label, char **envp)
{
    printf("%s:<br>\n<pre>\n", label);
    for ( ; *envp != NULL; envp++) {
        printf("%s\n", *envp);
    }
    printf("</pre><p>\n");
}

//find 'substr' from a fixed-length buffer   
//('full_data' will be treated as binary data buffer)  
//return NULL if not found  
char* memstr(char* full_data, int full_data_len, char* substr) 
{ 
    if (full_data == NULL || full_data_len <= 0 || substr == NULL) { 
        return NULL; 
    } 

    if (*substr == '\0') { 
        return NULL; 
    } 

    int sublen = strlen(substr); 

    int i; 
    char* cur = full_data; 
    int last_possible = full_data_len - sublen + 1; 
    for (i = 0; i < last_possible; i++) { 
        if (*cur == *substr) { 
            //assert(full_data_len - i >= sublen);  
            if (memcmp(cur, substr, sublen) == 0) { 
                //found  
                return cur; 
            } 
        } 
        cur++; 
    } 
    return NULL; 
} 


int main ()
{
    //char **initialEnv = environ;//当前的环境变量 备份了到initialEnv
    int count = 0;
	int ret = 0;
    while (FCGI_Accept() >= 0) {
        //数据---post数据 http://192.168.23.250:/demo?cmd=123&name=zhang3  [post数据]
        char *contentLength = getenv("CONTENT_LENGTH");
        //表示post数据的长度
        int len;

        printf("Content-type: text/html\r\n"
                "\r\n"
                "<title>FastCGI echo</title>"
                "<h1>FastCGI echo</h1>\n"
                "Request number %d,  Process ID: %d<p>\n", ++count, getpid());

        if (contentLength != NULL) {
            len = strtol(contentLength, NULL, 10);
        }
        else {
            len = 0;
        }

        if (len <= 0) {
            printf("No data from standard input.<p>\n");
        }
        else {
            //回显示 用户的post数据
			char *buf = malloc(len);
			char *p = buf;

            int i, ch;

            printf("Standard input:<br>\n<pre>\n");
            for (i = 0; i < len; i++) {
                //就相当于从浏览器客户端cfd, 读一个字节到程序中
                if ((ch = getchar()) < 0) {
                    printf("Error: Not enough bytes received on standard input<p>\n");
                    break;
                }
                //putchar(ch);
				*p =ch; 
                p++;
            }
            printf("Standard input end:<br>\n<pre>\n");
            printf("\n</pre><p>\n");
			
			/*****************************************/
			 //截取文件名称
			char* filename_s = memstr( buf, len, "filename");
			char* filename_e = memstr( filename_s, buf + len - filename_s, "\"\r\n");
			char* filename = filename_s + 10;
			char *file_buf = malloc(filename_e - filename);
			strncpy(file_buf,filename,filename_e - filename);
			int file_fd = open("./filename", O_WRONLY|O_CREAT,0664);
			ret = write(file_fd, file_buf, filename_e - filename);
			close(file_fd);
			
			/*****************************************/
			//截取文本文件
			char* start = memstr( buf, len, "\r\n\r\n");
			char* end = memstr( start,buf +len - start, "------");
			int se = end - start;
			char* data_buf = malloc(se-6);
			memcpy(data_buf,start + 4,se-6);
			
			int data_fd = open("./data", O_WRONLY|O_CREAT,0664);
			write(data_fd, data_buf, se-6);	
			close(data_fd);
        }
        //PrintEnv("Request environment", environ);//environ 应该是当前cgi程序的环境变量
        //PrintEnv("Initial environment", initialEnv);//initialEnv应该是 之前程序的默认环境变量
    } /* while */

    return 0;
}


